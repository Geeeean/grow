/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as authLayoutImport } from './routes/(auth)/_layout';
import { Route as appLayoutImport } from './routes/(app)/_layout';
import { Route as appLayoutIndexImport } from './routes/(app)/_layout.index';
import { Route as authLayoutSigninImport } from './routes/(auth)/_layout.signin';
import { Route as appLayoutVineyardsImport } from './routes/(app)/_layout.vineyards';
import { Route as appLayoutLicensesImport } from './routes/(app)/_layout.licenses';
import { Route as appLayoutInvoicingImport } from './routes/(app)/_layout.invoicing';
import { Route as appLayoutHarvestsImport } from './routes/(app)/_layout.harvests';
import { Route as appLayoutCertificationsImport } from './routes/(app)/_layout.certifications';
import { Route as appLayoutCellarImport } from './routes/(app)/_layout.cellar';
import { Route as appLayoutAnalysisImport } from './routes/(app)/_layout.analysis';

// Create Virtual Routes

const authImport = createFileRoute('/(auth)')();
const appImport = createFileRoute('/(app)')();

// Create/Update Routes

const authRoute = authImport.update({
    path: '/',
    getParentRoute: () => rootRoute,
} as any);

const appRoute = appImport.update({
    id: '/(app)',
    getParentRoute: () => rootRoute,
} as any);

const authLayoutRoute = authLayoutImport.update({
    id: '/_layout',
    getParentRoute: () => authRoute,
} as any);

const appLayoutRoute = appLayoutImport.update({
    id: '/_layout',
    getParentRoute: () => appRoute,
} as any);

const appLayoutIndexRoute = appLayoutIndexImport.update({
    path: '/',
    getParentRoute: () => appLayoutRoute,
} as any);

const authLayoutSigninRoute = authLayoutSigninImport.update({
    path: '/signin',
    getParentRoute: () => authLayoutRoute,
} as any);

const appLayoutVineyardsRoute = appLayoutVineyardsImport.update({
    path: '/vineyards',
    getParentRoute: () => appLayoutRoute,
} as any);

const appLayoutLicensesRoute = appLayoutLicensesImport.update({
    path: '/licenses',
    getParentRoute: () => appLayoutRoute,
} as any);

const appLayoutInvoicingRoute = appLayoutInvoicingImport.update({
    path: '/invoicing',
    getParentRoute: () => appLayoutRoute,
} as any);

const appLayoutHarvestsRoute = appLayoutHarvestsImport.update({
    path: '/harvests',
    getParentRoute: () => appLayoutRoute,
} as any);

const appLayoutCertificationsRoute = appLayoutCertificationsImport.update({
    path: '/certifications',
    getParentRoute: () => appLayoutRoute,
} as any);

const appLayoutCellarRoute = appLayoutCellarImport.update({
    path: '/cellar',
    getParentRoute: () => appLayoutRoute,
} as any);

const appLayoutAnalysisRoute = appLayoutAnalysisImport.update({
    path: '/analysis',
    getParentRoute: () => appLayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
    interface FileRoutesByPath {
        '/(app)': {
            id: '/';
            path: '/';
            fullPath: '/';
            preLoaderRoute: typeof appImport;
            parentRoute: typeof rootRoute;
        };
        '/(app)/_layout': {
            id: '/_layout';
            path: '/';
            fullPath: '/';
            preLoaderRoute: typeof appLayoutImport;
            parentRoute: typeof appRoute;
        };
        '/(auth)': {
            id: '/';
            path: '/';
            fullPath: '/';
            preLoaderRoute: typeof authImport;
            parentRoute: typeof rootRoute;
        };
        '/(auth)/_layout': {
            id: '/_layout';
            path: '/';
            fullPath: '/';
            preLoaderRoute: typeof authLayoutImport;
            parentRoute: typeof authRoute;
        };
        '/(app)/_layout/analysis': {
            id: '/_layout/analysis';
            path: '/analysis';
            fullPath: '/analysis';
            preLoaderRoute: typeof appLayoutAnalysisImport;
            parentRoute: typeof appLayoutImport;
        };
        '/(app)/_layout/cellar': {
            id: '/_layout/cellar';
            path: '/cellar';
            fullPath: '/cellar';
            preLoaderRoute: typeof appLayoutCellarImport;
            parentRoute: typeof appLayoutImport;
        };
        '/(app)/_layout/certifications': {
            id: '/_layout/certifications';
            path: '/certifications';
            fullPath: '/certifications';
            preLoaderRoute: typeof appLayoutCertificationsImport;
            parentRoute: typeof appLayoutImport;
        };
        '/(app)/_layout/harvests': {
            id: '/_layout/harvests';
            path: '/harvests';
            fullPath: '/harvests';
            preLoaderRoute: typeof appLayoutHarvestsImport;
            parentRoute: typeof appLayoutImport;
        };
        '/(app)/_layout/invoicing': {
            id: '/_layout/invoicing';
            path: '/invoicing';
            fullPath: '/invoicing';
            preLoaderRoute: typeof appLayoutInvoicingImport;
            parentRoute: typeof appLayoutImport;
        };
        '/(app)/_layout/licenses': {
            id: '/_layout/licenses';
            path: '/licenses';
            fullPath: '/licenses';
            preLoaderRoute: typeof appLayoutLicensesImport;
            parentRoute: typeof appLayoutImport;
        };
        '/(app)/_layout/vineyards': {
            id: '/_layout/vineyards';
            path: '/vineyards';
            fullPath: '/vineyards';
            preLoaderRoute: typeof appLayoutVineyardsImport;
            parentRoute: typeof appLayoutImport;
        };
        '/(auth)/_layout/signin': {
            id: '/_layout/signin';
            path: '/signin';
            fullPath: '/signin';
            preLoaderRoute: typeof authLayoutSigninImport;
            parentRoute: typeof authLayoutImport;
        };
        '/(app)/_layout/': {
            id: '/_layout/';
            path: '/';
            fullPath: '/';
            preLoaderRoute: typeof appLayoutIndexImport;
            parentRoute: typeof appLayoutImport;
        };
    }
}

// Create and export the route tree

interface appLayoutRouteChildren {
    appLayoutAnalysisRoute: typeof appLayoutAnalysisRoute;
    appLayoutCellarRoute: typeof appLayoutCellarRoute;
    appLayoutCertificationsRoute: typeof appLayoutCertificationsRoute;
    appLayoutHarvestsRoute: typeof appLayoutHarvestsRoute;
    appLayoutInvoicingRoute: typeof appLayoutInvoicingRoute;
    appLayoutLicensesRoute: typeof appLayoutLicensesRoute;
    appLayoutVineyardsRoute: typeof appLayoutVineyardsRoute;
    appLayoutIndexRoute: typeof appLayoutIndexRoute;
}

const appLayoutRouteChildren: appLayoutRouteChildren = {
    appLayoutAnalysisRoute: appLayoutAnalysisRoute,
    appLayoutCellarRoute: appLayoutCellarRoute,
    appLayoutCertificationsRoute: appLayoutCertificationsRoute,
    appLayoutHarvestsRoute: appLayoutHarvestsRoute,
    appLayoutInvoicingRoute: appLayoutInvoicingRoute,
    appLayoutLicensesRoute: appLayoutLicensesRoute,
    appLayoutVineyardsRoute: appLayoutVineyardsRoute,
    appLayoutIndexRoute: appLayoutIndexRoute,
};

const appLayoutRouteWithChildren = appLayoutRoute._addFileChildren(appLayoutRouteChildren);

interface appRouteChildren {
    appLayoutRoute: typeof appLayoutRouteWithChildren;
}

const appRouteChildren: appRouteChildren = {
    appLayoutRoute: appLayoutRouteWithChildren,
};

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren);

interface authLayoutRouteChildren {
    authLayoutSigninRoute: typeof authLayoutSigninRoute;
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
    authLayoutSigninRoute: authLayoutSigninRoute,
};

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(authLayoutRouteChildren);

interface authRouteChildren {
    authLayoutRoute: typeof authLayoutRouteWithChildren;
}

const authRouteChildren: authRouteChildren = {
    authLayoutRoute: authLayoutRouteWithChildren,
};

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren);

export interface FileRoutesByFullPath {
    '/': typeof appLayoutIndexRoute;
    '/analysis': typeof appLayoutAnalysisRoute;
    '/cellar': typeof appLayoutCellarRoute;
    '/certifications': typeof appLayoutCertificationsRoute;
    '/harvests': typeof appLayoutHarvestsRoute;
    '/invoicing': typeof appLayoutInvoicingRoute;
    '/licenses': typeof appLayoutLicensesRoute;
    '/vineyards': typeof appLayoutVineyardsRoute;
    '/signin': typeof authLayoutSigninRoute;
}

export interface FileRoutesByTo {
    '/': typeof appLayoutIndexRoute;
    '/analysis': typeof appLayoutAnalysisRoute;
    '/cellar': typeof appLayoutCellarRoute;
    '/certifications': typeof appLayoutCertificationsRoute;
    '/harvests': typeof appLayoutHarvestsRoute;
    '/invoicing': typeof appLayoutInvoicingRoute;
    '/licenses': typeof appLayoutLicensesRoute;
    '/vineyards': typeof appLayoutVineyardsRoute;
    '/signin': typeof authLayoutSigninRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    '/': typeof authRouteWithChildren;
    '/_layout': typeof authLayoutRouteWithChildren;
    '/_layout/analysis': typeof appLayoutAnalysisRoute;
    '/_layout/cellar': typeof appLayoutCellarRoute;
    '/_layout/certifications': typeof appLayoutCertificationsRoute;
    '/_layout/harvests': typeof appLayoutHarvestsRoute;
    '/_layout/invoicing': typeof appLayoutInvoicingRoute;
    '/_layout/licenses': typeof appLayoutLicensesRoute;
    '/_layout/vineyards': typeof appLayoutVineyardsRoute;
    '/_layout/signin': typeof authLayoutSigninRoute;
    '/_layout/': typeof appLayoutIndexRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths:
        | '/'
        | '/analysis'
        | '/cellar'
        | '/certifications'
        | '/harvests'
        | '/invoicing'
        | '/licenses'
        | '/vineyards'
        | '/signin';
    fileRoutesByTo: FileRoutesByTo;
    to:
        | '/'
        | '/analysis'
        | '/cellar'
        | '/certifications'
        | '/harvests'
        | '/invoicing'
        | '/licenses'
        | '/vineyards'
        | '/signin';
    id:
        | '__root__'
        | '/'
        | '/_layout'
        | '/_layout/analysis'
        | '/_layout/cellar'
        | '/_layout/certifications'
        | '/_layout/harvests'
        | '/_layout/invoicing'
        | '/_layout/licenses'
        | '/_layout/vineyards'
        | '/_layout/signin'
        | '/_layout/';
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    appRoute: typeof appRouteWithChildren;
    authRoute: typeof authRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
    appRoute: appRouteWithChildren,
    authRoute: authRouteWithChildren,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/"
      ]
    },
    "/": {
      "filePath": "(auth)",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "(auth)/_layout.tsx",
      "parent": "/",
      "children": [
        "/_layout/signin"
      ]
    },
    "/_layout/analysis": {
      "filePath": "(app)/_layout.analysis.tsx",
      "parent": "/_layout"
    },
    "/_layout/cellar": {
      "filePath": "(app)/_layout.cellar.tsx",
      "parent": "/_layout"
    },
    "/_layout/certifications": {
      "filePath": "(app)/_layout.certifications.tsx",
      "parent": "/_layout"
    },
    "/_layout/harvests": {
      "filePath": "(app)/_layout.harvests.tsx",
      "parent": "/_layout"
    },
    "/_layout/invoicing": {
      "filePath": "(app)/_layout.invoicing.tsx",
      "parent": "/_layout"
    },
    "/_layout/licenses": {
      "filePath": "(app)/_layout.licenses.tsx",
      "parent": "/_layout"
    },
    "/_layout/vineyards": {
      "filePath": "(app)/_layout.vineyards.tsx",
      "parent": "/_layout"
    },
    "/_layout/signin": {
      "filePath": "(auth)/_layout.signin.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "(app)/_layout.index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
